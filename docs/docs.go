// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/:id/file": {
            "post": {
                "description": "upload file",
                "produces": [
                    "application/json"
                ],
                "summary": "upload file",
                "parameters": [
                    {
                        "description": "the file data",
                        "name": "photo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "type": "string",
                        "description": "the user id",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/shop/": {
            "get": {
                "description": "获取店铺列表，店铺页面，创建管理员，创建会员都会用到，可分页，",
                "produces": [
                    "application/json"
                ],
                "summary": "获取店铺列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "size，如果不传，默认获取所有",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "新增店铺，必须包含name,address 字段",
                "produces": [
                    "application/json"
                ],
                "summary": "新增店铺",
                "parameters": [
                    {
                        "description": "店铺信息",
                        "name": "shop",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/shop/:id": {
            "put": {
                "description": "改变店铺的状态，0关闭，1开张",
                "produces": [
                    "application/json"
                ],
                "summary": "PUT改变店铺的状态",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "店铺的id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "要改变的状态值",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/shop/:id/scale": {
            "put": {
                "description": "PUT改变店铺的积分比例，如果是管理员则传递店铺id的值为0，直接修改所有店铺的积分比例，",
                "produces": [
                    "application/json"
                ],
                "summary": "PUT改变店铺的积分比例，如果是管理员则直接修改所有店铺的积分比例",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "店铺的id，管理员账户传0，慎用",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "要改变的比例值，浮点",
                        "name": "scale",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/": {
            "get": {
                "description": "获取用户列表，分页，可以根据角色进行区分",
                "produces": [
                    "application/json"
                ],
                "summary": "GET获取用户列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "the req size,if null ,will get all users",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "角色 admin：0，门店管理员：1，会员2:",
                        "name": "role",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/:id": {
            "put": {
                "description": "改变会员/管理员的状态，冻结什么的操作都是这个，调用成功后会将此用户返回，用于更新",
                "produces": [
                    "application/json"
                ],
                "summary": "PUT改变会员/管理员的状态，冻结什么的操作都是这个",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "用户的ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "要改变的值",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/:id/inte": {
            "put": {
                "description": "改变会员的积分，传递过来的是钱，不是换算后的积分",
                "produces": [
                    "application/json"
                ],
                "summary": "PUT改变会员的积分",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "用户的ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "消费金额",
                        "name": "money",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "登录必传的参数为用户名和密码，登录成功会返回用户的全部信息",
                "produces": [
                    "application/json"
                ],
                "summary": "登录",
                "parameters": [
                    {
                        "description": "reg user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/regist/": {
            "post": {
                "description": "新增门店管理员，新增会员都是这个接口，post的参数记得带role，1门店管理员，2会员，其中shopid为门店分组",
                "produces": [
                    "application/json"
                ],
                "summary": "regist",
                "parameters": [
                    {
                        "description": "reg user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/v1",
	Schemes:     []string{},
	Title:       "Swagger Example API",
	Description: "This is a sample server Petstore server.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
